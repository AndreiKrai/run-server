// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id                    Int       @id @default(autoincrement())
  email                 String    @unique
  password              String
  passwordResetToken    String?
  passwordResetExpires  DateTime?
  emailVerificationToken String?  @unique
  emailVerified         Boolean   @default(false)

  // OAuth provider IDs
  googleId              String?   @unique
  facebookId            String?   @unique
  appleId               String?   @unique
  githubId              String?   @unique

  // OAuth metadata
  provider              String?   // "local", "google", "facebook", etc.
  lastLogin             DateTime?
  
  // Tokens for auth
  tokens                Token[]
  
  // Profile information
  profile               Profile?
  createdAt             DateTime  @default(now())
  updatedAt             DateTime  @updatedAt
}

// Token model for storing OAuth tokens
model Token {
  id           Int       @id @default(autoincrement())
  userId       Int
  kind         String    // "access", "refresh", "oauth_google", etc.
  accessToken  String
  refreshToken String?   // For OAuth refresh tokens
  tokenType    String?   // "bearer", etc.
  expiresAt    DateTime?
  scope        String?
  provider     String?   // "google", "facebook", etc.
  raw          Json?     // Store additional provider-specific data
  user         User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
  
  @@unique([userId, kind, provider])
}

// Profile model for storing user profile information
model Profile {
  id             Int       @id @default(autoincrement())
  userId         Int       @unique
  name           String?
  firstName      String?
  lastName       String?   
  displayName    String?   // For social profiles that have a display name
  gender         String?
  birthdate      DateTime?
  location       String?
  website        String?
  bio            String?   // Short bio/description
  picture        String?   // Profile picture URL
  coverPhoto     String?   // Cover/banner image URL
  phoneNumber    String?
  language       String?   // Preferred language
  timezone       String?
  
  // Social media handles
  twitter        String?
  instagram      String?
  linkedin       String?
  
  user           User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt
}