// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id                    Int       @id @default(autoincrement())
  email                 String    @unique
  password              String
  passwordResetToken    String?
  passwordResetExpires  DateTime?
  emailVerificationToken String?  @unique
  emailVerified         Boolean   @default(false)

  // OAuth provider IDs
  googleId              String?   @unique
  facebookId            String?   @unique
  appleId               String?   @unique
  githubId              String?   @unique

  // OAuth metadata
  provider              String?   // "local", "google", "facebook", etc.
  lastLogin             DateTime?
  
  // Tokens for auth
  tokens                Token[]
  
  // Profile information
  profile               Profile?
  addresses             Address[]

  // Event participation
  eventParticipation    Participant[] // Events the user registered for
  eventResults          Result[]      // Results submitted by the user

  createdAt             DateTime  @default(now())
  updatedAt             DateTime  @updatedAt
}

// Token model for storing OAuth tokens
model Token {
  id           Int       @id @default(autoincrement())
  userId       Int
  kind         String    // "access", "refresh", "oauth_google", etc.
  accessToken  String
  refreshToken String?   // For OAuth refresh tokens
  tokenType    String?   // "bearer", etc.
  expiresAt    DateTime?
  scope        String?
  provider     String?   // "google", "facebook", etc.
  raw          Json?     // Store additional provider-specific data
  user         User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
  
  @@unique([userId, kind, provider])
}

// Profile model for storing user profile information
model Profile {
  id             Int       @id @default(autoincrement())
  userId         Int       @unique
  name           String?
  firstName      String?
  lastName       String?   
  displayName    String?   // For social profiles that have a display name
  gender         String?
  birthdate      DateTime?
  location       String?
  website        String?
  bio            String?   // Short bio/description
  picture        String?   // Profile picture URL
  coverPhoto     String?   // Cover/banner image URL
  phoneNumber    String?
  language       String?   // Preferred language
  timezone       String?
  
  // Social media handles
  twitter        String?
  instagram      String?
  linkedin       String?
  
  user           User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt
}

// Address model for storing user addresses
model Address {
  id          Int       @id @default(autoincrement())
  userId      Int       // Foreign key to User
  type        String?   // "home", "work", "gym", "race", etc.
  street      String?   // Street address line 1
  city        String?
  state       String?   // State/Province/Region
  postalCode  String?
  country     String?
  
  // Meta information
  isPrimary   Boolean   @default(false)
  label       String?   // Custom label ("Home", "Work", "My Gym", etc.)
  
  // Relation to User
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  // Timestamps
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  
  @@index([userId])
}

// Event model for running events (marathons, etc.)
model Event {
  id              Int         @id @default(autoincrement())
  name            String
  description     String?     @db.Text
  eventType       String      // "marathon", "half-marathon", "5k", "10k", "trail", "ultra"
  status          String      @default("upcoming") // "upcoming", "active", "completed", "cancelled"
  
  // Date information
  eventDate       DateTime    // Main event date
  registrationStartDate DateTime  // When registration opens
  registrationEndDate   DateTime  // When registration closes
  resultsEntryDeadline  DateTime? // Deadline for submitting results
  
  // Location information
  location        String?     // City or venue name
  address         String?
  city            String?
  state           String?
  country         String?
  postalCode      String?
  
  // Event details
  featuredImage   String?     // URL to main event image
  bannerImage     String?     // URL to banner image
  
  // Payment information
  basePrice       Float       // Base registration price
  currency        String      @default("USD") // Currency code
  
  // Relations
  categories      EventCategory[]  // Different categories for the event
  participants    Participant[]    // Registrations for this event
  results         Result[]         // Results submitted for this event
  
  // Timestamps
  createdAt       DateTime    @default(now())
  updatedAt       DateTime    @updatedAt
  
  @@index([eventDate])
  @@index([eventType])
  @@index([status])
}

// Categories within an event (by distance, age group, etc.)
model EventCategory {
  id              Int         @id @default(autoincrement())
  eventId         Int
  name            String      // e.g., "Marathon - Men 18-34", "5K - Women 35-44"
  description     String?
  distance        Float       // Distance in kilometers
  
  // Category criteria
  gender          String?     // "male", "female", "any"
  minAge          Int?        // Minimum age
  maxAge          Int?        // Maximum age
    
  // Relations
  event           Event       @relation(fields: [eventId], references: [id], onDelete: Cascade)
  participants    Participant[] // People registered in this category
  results         Result[]    // Results for this category
  
  // Timestamps
  createdAt       DateTime    @default(now())
  updatedAt       DateTime    @updatedAt
  
  @@index([eventId])
}

// Participant registration model
model Participant {
  id              Int         @id @default(autoincrement())
  userId          Int         // User who registered
  eventId         Int         // Event they registered for
  categoryId      Int         // Which category they registered in
  
  // Registration details
  registrationDate DateTime   @default(now())
  status          String      @default("pending") // "pending", "confirmed", "cancelled"
  bibNumber       String?     // Assigned race bib number
  
  // Payment information
  paymentStatus   String      @default("unpaid") // "unpaid", "paid", "refunded"
  amountPaid      Float       // Amount actually paid
  transactionId   String?     // Payment provider transaction ID
  paymentDate     DateTime?   // When payment was completed
    
  // Other registration fields
  shirtSize       String?     // "XS", "S", "M", "L", "XL", etc.
  estimatedFinishTime String?  // User's estimated finish time
  notes           String?     // Any special notes or requests
  
  // Relations
  user            User        @relation(fields: [userId], references: [id])
  event           Event       @relation(fields: [eventId], references: [id], onDelete: Cascade)
  category        EventCategory @relation(fields: [categoryId], references: [id])
  result          Result?     // Optional relation to submitted result
  
  // Timestamps
  createdAt       DateTime    @default(now())
  updatedAt       DateTime    @updatedAt
  
  @@unique([eventId, userId, categoryId]) // One registration per user per category per event
  @@index([userId])
  @@index([eventId])
  @@index([categoryId])
}

// Results model for tracking finish times and rankings
model Result {
  id              Int         @id @default(autoincrement())
  participantId   Int         @unique // Links to participant registration
  eventId         Int         // The event
  categoryId      Int         // The category
  userId          Int         // User who completed the race
  
  // Time information
  finishTime      String      // Finish time in HH:MM:SS format
  timeInSeconds   Int         // Calculated time in seconds for sorting
  
  // Result details
  verificationMethod String   @default("self-reported") // "self-reported", "official", "verified"
  verificationImage String?   // Optional URL to proof image (screenshot of tracking app, etc.)
  notes           String?     // Additional notes
  
  // Status
  status          String      @default("pending") // "pending", "verified", "disputed", "disqualified"
  
  // Position/ranking (filled in by admin or automatically)
  overallPlace    Int?        // Overall place in event
  categoryPlace   Int?        // Place within category
  
  // Relations
  participant     Participant @relation(fields: [participantId], references: [id])
  user            User        @relation(fields: [userId], references: [id])
  event           Event       @relation(fields: [eventId], references: [id], onDelete: Cascade)
  category        EventCategory @relation(fields: [categoryId], references: [id])
  
  // Timestamps
  submittedAt     DateTime    @default(now())
  updatedAt       DateTime    @updatedAt
  verifiedAt      DateTime?   // When result was verified by organizer
  
  @@index([eventId])
  @@index([categoryId])
  @@index([userId])
  @@index([status])
}


